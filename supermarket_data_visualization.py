# -*- coding: utf-8 -*-
"""supermarket_data_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/162V0uNBpylSrNoX1Yu8cAHjM0X04S8oE

The link below is the site from which the project has been done.

# https://thecleverprogrammer.com/2020/05/26/supermarket-sales-analysis-with-data-science/#google_vignette
"""

# Importing # Data visualization mini project sample

# Importing the required modules
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

plt.figure(figsize=(15,6))
plt.style.use("classic")
ax=sns.countplot(x="payment",hue="Branch",palette='pastel')
ax.set_title(label='TYPE OF PAYMENT USED',fontsize=20)
ax.set_xlabel(xlabel="payment method",fontsize=14)
ax.set_ylabel(ylabel='people count',fontsize=14)

#Pulling the data
data = pd.read_csv("month3_viz.csv")
print(data.shape) # Prints number of rows and columns this data set has
data.head

# Cheking for any null rows in the columns

data.isnull().sum()

# Checking info of the data set
# Gives num of columns and rows
# gives num of null rows of each column
# gives dtype of each column etc.
data.info()

# Prints number of rows and columns this data set has
print("This data set has {} Columns and {} Rows.\n".format(data.shape[0], data.shape[1]))

# Plot comapring number of female and male customers at the super market
plt.figure(figsize=(10,6))
plt.style.use('classic')
ax= sns.countplot(x="Gender", data=data , palette = 'PRGn')
ax.set_xlabel(xlabel= "Gender",fontsize=18)
ax.set_ylabel(ylabel = "Gender count", fontsize = 18)
ax.set_title(label = "Females and Males at Supermarket", fontsize = 20)
plt.show()

# Crosschecking the plot data with calculation
x=data.groupby(["Gender"])["Gender"].count() # Grouping the data by Gender and counting the number of each gender
total_customers=(x["Female"]+x["Male"]) # Total customers
perc_female=((x["Female"]/total_customers)*100) # Percentage of females
perc_male=((x["Male"]/total_customers)*100) # Percentage of Males
print(x) # Prints grouped data set
print()
print("Total number of customers are {}.\n".format(total_customers))
print("Out of {} customers, {}% are Female and {}% are Male.\n".format(total_customers, perc_female, perc_male))

plt.figure(figsize=(15,10))
ax=sns.color_palette("Set3")
ax=sns.set_palette("deep")
ax=sns.boxplot(data=data, y="Product line", x= "gross income")
ax.set_xlabel(xlabel="Gross Income", fontsize=18)
ax.set_ylabel(ylabel="Gross Income", fontsize=18)
ax.set_title(label="Products and Gross income", fontsize=20)
ax.set(xlim=(0, 50))

# Visualizing which product is best selling at which branches
sns.color_palette("tab10")
sns.set_palette("pastel")
sns.displot(data, x="Product line", hue="Branch", height=6, aspect=2, alpha=0.5, multiple="dodge", discrete=False)

# In the plot we can see that
''' 
Branch A is best known for its Home and Lifestyle Products
Branch B is best known for Sports/Travel and Fashion Accessories
branch C is best known for Food and Beverages
'''

max_income=data["gross income"].max()
min_income=data["gross income"].min()
avg_income=((max_income+min_income)/2)
print(max_income)
print(min_income)
print(avg_income)

# Using multiple data columns to extract more meaning into the Visualization
plt.figure(figsize = (14,8))
plt.style.use('classic')
ax=sns.color_palette("Wistia")
ax=sns.set_palette("pastel")
ax = sns.boxplot(data=data, y="Product line", x= "Quantity", hue="Gender")
plt.legend(loc="upper right")
ax.set(xlim=(0, 11))

max_quantity=data["Quantity"].max()
min_quantity=data["Quantity"].min()
print(max_quantity)
print(min_quantity)

plt.figure(figsize=(10,10))
ax=sns.color_palette("Wistia")
ax=sns.set_palette("deep")
ax=sns.countplot(data=data, y = "Product line", hue="Payment")

plt.figure(figsize = (14,8))
plt.style.use('classic')
ax=sns.color_palette("Wistia")
ax=sns.set_palette("bright")
ax = sns.boxenplot(data=data, y="Product line", x= "Tax 5%", hue="City")
plt.legend(loc="upper right")
ax.set(xlim=(0, 50))

max_tax=data["Tax 5%"].max()
min_tax=data["Tax 5%"].min()
print(max_tax)
print(min_tax)

# Cross Checking with calculations
y=data.groupby(["Customer type","Gender"])["Gender"].count()
print()
mem=y["Member"]
mem_females=mem["Female"]
mem_males=mem["Male"]
non_mem=y["Normal"]
non_mem_females = non_mem["Female"]
non_mem_males = non_mem["Male"]
print(mem)
print()
print("Number of Female, Member customers are, {}.\n".format(mem_females))
print("Number of Male, Member customers are, {}.\n".format(mem_males))
print()
print("Number of Female, Non-Member customers are, {}.\n".format(non_mem_females))
print("Number of Male, Non-Member customers are, {}.\n".format(non_mem_males))

plt.figure(figsize=(14,6))
sns.countplot(y='Product line', data=data, order = data['Product line'].value_counts().index, palette="tab20b")
sns.countplot(y='Product line', hue="Gender", data=data, palette="Pastel1")
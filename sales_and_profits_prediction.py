# -*- coding: utf-8 -*-
"""sales_and_profits_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117HUoK--uRRQ1PbaBVVfovvoOdKY0Ndy
"""

!pip install anvil-uplink

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns
import pickle
from datetime import datetime
import datetime

import anvil.tables as tables
from anvil.tables import app_tables
import anvil.media

import pandas as pd
import anvil.media
import pickle

@anvil.server.callable
def store_data_1(file):
  with anvil.media.TempFile(file) as file_name:
    if file.content_type == 'text/csv':
      df = pd.read_csv(file_name)
      df.to_csv('month3_2.csv')
      # file_name='month3_2.csv'
      # pickle.dump(df,open(file_name, 'wb'))
  pass

# import pandas as pd
# import anvil.media

# @anvil.server.callable
# def store_data(file):
#   with anvil.media.TempFile(file) as file_name:
#     if file.content_type == 'text/csv':
#       df = pd.read_csv(file_name)
#     else:
#       df = pd.read_excel(file_name)
#     for d in df.to_dict(orient="records"):
#       # d is now a dict of {columnname -> value} for this row
#       # We use Python's **kwargs syntax to pass the whole dict as
#       # keyword arguments
#       app_tables.user_uploaded.add_row(**d)

!pip install xlrd

# import pandas as pd
# import anvil.tables as tables
# from anvil.tables import app_tables

# @anvil.server.callable
# def import_csv_data(file):
#   with open(file, "r") as f:
#     df = pd.read_csv(f)
#     for d in df.to_dict(orient="records"):
#       # d is now a dict of {columnname -> value} for this row
#       # We use Python's **kwargs syntax to pass the whole dict as
#       # keyword arguments
#       app_tables.user_uploaded.add_row(**d)

import anvil.server

anvil.server.connect("LUSKFFUEO5USGGDW5K2PHKQI-HERZ5MG4BGLBFMSC")

data = pd.read_csv("month1_2.csv")

user_data2=pd.read_csv("month2.csv")

user_data=pd.read_csv("/content/month3_2.csv")

test1_user=user_data[["Total"]]

next_month = user_data2[["Total"]]

next_month_profits=user_data2[["gross income"]]

test1_user_profits = user_data[["gross income"]]

user_data2=user_data2[["Unit price", "Quantity", "Product line_Electronic accessories", "Product line_Fashion accessories", "Product line_Food and beverages", "Product line_Health and beauty", "Product line_Home and lifestyle", "Product line_Sports and travel", "Branch_Ameerpet", "Branch_Gurgaon", "Branch_Jayanagar", "Rating"]]

train_x_x = data[["Unit price", "Quantity", "Product line_Electronic accessories", "Product line_Fashion accessories", "Product line_Food and beverages", "Product line_Health and beauty", "Product line_Home and lifestyle", "Product line_Sports and travel", "Branch_Ameerpet", "Branch_Gurgaon", "Branch_Jayanagar", "Rating"]]

user_data=user_data[["Unit price", "Quantity", "Product line_Electronic accessories", "Product line_Fashion accessories", "Product line_Food and beverages", "Product line_Health and beauty", "Product line_Home and lifestyle", "Product line_Sports and travel", "Branch_Ameerpet", "Branch_Gurgaon", "Branch_Jayanagar", "Rating"]]

"""# Not related to actual Code

# From here...
"""

user_data.info()

print(test1_user.shape)

print(next_month.shape)

anvil.server.wait_forever()

print(train_x_x.shape)

# data = pd.read_csv("supermarket_sales_1.csv")

slice1 = data.sample(frac=0.05)

slice2 = data.sample(frac=0.05)

user_file1 = slice1.copy()
user_file1.to_csv("user_file1.csv")

user_file2 = slice2.copy()
user_file2.to_csv("user_file2.csv")

data=data.sample(frac=0.9)

print(data["Date"].unique())

monthly_data = data.copy()
# Drop the day indicator from the date column
monthly_data.Date = monthly_data.Date.apply(lambda x: str(x)[:-8]+ str(x)[-5:])

# Sum sales per month
monthly_data = monthly_data.groupby('Date')['gross income'].sum().reset_index()
monthly_data.Date = pd.to_datetime(monthly_data.Date)

monthly_data.to_csv('monthly_data.csv')
monthly_df=monthly_data

monthly_df.info()

monthly_data

plt.figure(figsize=(10,5))
plt.xlim(0, 6000)
plt.xlabel('Date')
plt.ylabel('income')
sns.kdeplot((monthly_data["Date"]), (monthly_data['gross income']),shade=True)
plt.show()

fig = plt.figure(figsize = (10, 5))
 
# creating the bar plot
dates=list(monthly_data["Date"])
income=list(monthly_data["gross income"])
plt.bar(dates, income, color ='maroon',width = 0.4)
plt.xlabel("Months")
plt.ylabel("Income")
plt.title("4 Months of Income Data")
plt.show()

array=list((monthly_data["gross income"]))

print(array)

data.info()

print(data["Gender"].unique())

print(data["City"].unique())

print(data["Branch"].unique())

print(data["Product line"].unique())

print(data["Payment"].unique())

print(data["Customer type"].unique())

print(data["Gender"].value_counts())

print(data["Branch"].value_counts())

experimental=one_hot_encoded_data.copy()
experimental.to_csv("experimental.csv")

train,test = train_test_split(data, test_size=0.3)

print(train.shape)
print(test.shape)

train_x = train[["Unit price", "Quantity", "Product line_Electronic accessories", "Product line_Fashion accessories", "Product line_Food and beverages", "Product line_Health and beauty", "Product line_Home and lifestyle", "Product line_Sports and travel", "Branch_Ameerpet", "Branch_Gurgaon", "Branch_Jayanagar", "Rating"]]
train_y = train[["gross income"]]

test_x = test[["Unit price", "Quantity", "Product line_Electronic accessories", "Product line_Fashion accessories", "Product line_Food and beverages", "Product line_Health and beauty", "Product line_Home and lifestyle", "Product line_Sports and travel", "Branch_Ameerpet", "Branch_Gurgaon", "Branch_Jayanagar", "Rating"]]
test_y = test[["gross income"]]

data.head()

train_x_x.head()

"""# Till here..."""

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(train_x_x, next_month)
prediction = model.predict(user_data)
# prediction=int(prediction.sum())
# test1_user=int(test1_user.sum())
# print(test1_user.sum())
# print(prediction.sum())
# print("The predicted sales for the next month is going to be {0:.2f}".format(prediction.sum()))

@anvil.server.callable
def predict_sales():
  # prediction = model.predict(user_data2)
  return str(int(prediction.sum())) #, str(test1_user)]

from sklearn.linear_model import LinearRegression
mod=LinearRegression()
mod.fit(train_x_x, next_month_profits)
pred = mod.predict(user_data)
# pred = int(pred.sum())
# test1_user_profits = int(test1_user_profits.sum())
# print(test1_user_profits.sum())
# print(pred.sum())

@anvil.server.callable
def predict_profits():
  # pred = mod.predict(user_data2)
  return str(int(pred.sum())) #, str(test1_user_profits)]

import math
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
rmse = math.sqrt(mean_squared_error(test1_user, prediction))
print(rmse)
# from sklearn.metrics import r2_score
print(r2_score(test1_user, prediction)*100)

bias = abs((int(test1_user.sum())-int((prediction.sum())))/int(test1_user.sum()))
accuaracy = (100-bias)
print("The overall accuracy of the prediction is {0:.2f}%".format(accuaracy))

#current Month's Sales
print("The Current Month's Total Sales are:{}".format(int(test1_user.sum())))

# Current month's profits
print("The Current Month's profits are:{}".format(int(test1_user_profits.sum())))

anvil.server.wait_forever()

"""# Done"""

import math
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
rmse = math.sqrt(mean_squared_error(test1_user,prediction))
print(rmse)
# from sklearn.metrics import r2_score
print(r2_score(test1_user, prediction)*100)

from xgboost.sklearn import XGBRegressor
model1=LinearRegression()
model1.fit(train_x, train_y)
prediction1 = model1.predict(test_x)
print(len(prediction),len(test_y))

from sklearn.svm import SVR
model2=LinearRegression()
model2.fit(train_x, train_y)
prediction2 = model2.predict(user)

rmse = math.sqrt(mean_squared_error(test_y,prediction2))
print(rmse)
# from sklearn.metrics import r2_score
print(r2_score(test_y, prediction2))

prediction.sum()

int(test1_user.sum())

print(100-bias)

print(next_month.tail())

print(prediction[-5:-1])

int(test1_user.sum())

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
data = pd.read_csv("/content/month3_2.csv")
print(data.head())

import os
print(os.listdir())

import warnings
warnings.filterwarnings('ignore')
#importing dataset
from google.colab import files
uploaded=files.upload()
dataset = pd.read_csv("/content/month3_2.csv")
type(dataset)
dataset.shape
dataset.dtypes
dataset.head(5)
dataset.sample(5)

type(dataset)
dataset.shape

# correlation_matrix=dataset.corr().round(2)
# f,ax=plt.subplots(figsize=(20,14))
# sns.heatmap(data=correlation_matrix,annot=True)

# dataset.hist(figsize=(40,40),layout=(8,8))

sns.barplot(data=dataset,x='Tax 5%',y='gross income')

# sns.catplot(data=dataset,x='Gender_Female',y='Gender_Male')

dataset['Payment_Cash'].value_counts()
dataset['Payment_Credit/Debit card'].value_counts()
dataset['Payment_UPI'].value_counts()

import plotly.express as px
import plotly.graph_objects as go
figure = px.scatter(data_frame = data, x="gross income",
                    y="Branch_Ameerpet", size="gross margin percentage", trendline="ols")
figure.show()

import plotly.express as px
import plotly.graph_objects as go
figure = px.scatter(data_frame = data, x="gross income",
                    y="Branch_Gurgaon", size="gross margin percentage", trendline="ols")
figure.show()

import plotly.express as px
import plotly.graph_objects as go
figure = px.scatter(data_frame = data, x="gross income",
                    y="Branch_Jayanagar", size="gross margin percentage", trendline="ols")
figure.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
x = np.array(data.drop(["gross income"], 1))
y = np.array(data["gross income"])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,test_size=0.2,random_state=42)
model = LinearRegression()
from sklearn.model_selection import train_test_split

predictors = dataset.drop("gross  income",axis=1)
grossincome = dataset["gross income"]

X_train,X_test,Y_train,Y_test = train_test_split(predictors,gross income,test_size=0.20,random_state=0)
X_train.shape
X_test.shape
Y_train.shape
Y_test.shape